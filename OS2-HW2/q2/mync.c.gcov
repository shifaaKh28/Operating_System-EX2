        -:    0:Source:mync.c
        -:    0:Graph:mync.gcno
        -:    0:Data:mync.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <unistd.h>
        -:    4:#include <string.h>
        -:    5:#include <sys/wait.h>
        -:    6:#include <sys/types.h>
        -:    7:
        1:    8:int main(int argc, char *argv[]) {
        1:    9:    if (argc < 3 || strcmp(argv[1], "-e") != 0) {
    #####:   10:        fprintf(stderr, "Usage: %s -e \"command\"\n", argv[0]);
    #####:   11:        return 1;
        -:   12:    }
        -:   13:
        -:   14:    // Extract the command from the arguments
        1:   15:    char *command = argv[2];
        -:   16:
        -:   17:    // Fork a child process
        1:   18:    pid_t pid = fork();
        -:   19:
        2:   20:    if (pid < 0) {
    #####:   21:        perror("fork");
    #####:   22:        return 1;
        -:   23:    }
        -:   24:
        2:   25:    if (pid == 0) { // Child process
        -:   26:        // Parse the command string into a program and arguments
        -:   27:        char *args[100];
        1:   28:        char *token = strtok(command, " ");
        1:   29:        int i = 0;
        3:   30:        while (token != NULL) {
        2:   31:            args[i++] = token;
        2:   32:            token = strtok(NULL, " ");
        -:   33:        }
        1:   34:        args[i] = NULL; // Null-terminate the array
        -:   35:
        -:   36:        // If the command contains a relative path or absolute path
        1:   37:        if (strchr(args[0], '/') != NULL) {
        1:   38:            if (execv(args[0], args) == -1) {
    #####:   39:                perror("execv");
    #####:   40:                exit(1);
        -:   41:            }
        -:   42:        } else {
    #####:   43:            if (execvp(args[0], args) == -1) {
    #####:   44:                perror("execvp");
    #####:   45:                exit(1);
        -:   46:            }
        -:   47:        }
        -:   48:    } else { // Parent process
        -:   49:        // Wait for the child process to complete
        -:   50:        int status;
        1:   51:        waitpid(pid, &status, 0);
        -:   52:    }
        -:   53:
        2:   54:    return 0;
        -:   55:}
