        -:    0:Source:mync.c
        -:    0:Graph:mync.gcno
        -:    0:Data:mync.gcda
        -:    0:Runs:5
        -:    1:#include <stdio.h>  // Standard I/O library
        -:    2:#include <stdlib.h>  // Standard library for general functions
        -:    3:#include <unistd.h>  // Unix standard functions
        -:    4:#include <sys/types.h>  // Data types for system calls
        -:    5:#include <sys/socket.h>  // Sockets API
        -:    6:#include <sys/un.h>  // Unix domain sockets
        -:    7:#include <netinet/in.h>  // Internet domain address structures
        -:    8:#include <arpa/inet.h>  // Functions for IP address conversion
        -:    9:#include <sys/wait.h>  // Waiting for process termination
        -:   10:#include <string.h>  // String manipulation functions
        -:   11:#include <getopt.h>  // Command line option parsing
        -:   12:#include <errno.h>  // Error number definitions
        -:   13:#include <fcntl.h>  // File control options
        -:   14:#include <signal.h>  // Signal handling
        -:   15:#include <netdb.h>  // Network database operations
        -:   16:#include <poll.h>  // Polling for events on file descriptors
        -:   17:#include <ctype.h>  // Character type functions
        -:   18:
        -:   19:#define SIZE 3  // Define the size of the Tic-Tac-Toe board
        -:   20:
        -:   21:/**
        -:   22: * @brief Executes a given command with its arguments.
        -:   23: * 
        -:   24: * @param args The command and its arguments as a single string.
        -:   25: */
        5:   26:void executeCommand(char *args) {
        -:   27:    // Tokenize the input arguments string
        5:   28:    char *token = strtok(args, " ");
        5:   29:    if (token == NULL) {
    #####:   30:        fprintf(stderr, "No arguments provided\n");
    #####:   31:        exit(1);
        -:   32:    }
        -:   33:
        -:   34:    // Initialize an array to hold the command and its arguments
        5:   35:    char **arguments = NULL;
        5:   36:    int n = 0;
        -:   37:
        -:   38:    // Parse the tokenized arguments and store them in the array
       15:   39:    while (token != NULL) {
       10:   40:        arguments = realloc(arguments, (n + 1) * sizeof(char *));
       10:   41:        if (arguments == NULL) {
    #####:   42:            exit(1);
        -:   43:        }
       10:   44:        arguments[n++] = token;
       10:   45:        token = strtok(NULL, " ");
        -:   46:    }
        -:   47:
        -:   48:    // Add a NULL terminator to the arguments array
        5:   49:    arguments = realloc(arguments, (n + 1) * sizeof(char *));
        5:   50:    if (arguments == NULL) {
    #####:   51:        exit(1);
        -:   52:    }
        5:   53:    arguments[n] = NULL;
        -:   54:
        -:   55:    // Fork a new process to execute the command
        5:   56:    int pid = fork();
        7:   57:    if (pid < 0) {
    #####:   58:        exit(1);
        -:   59:    }
        -:   60:
        -:   61:    // Child process
        7:   62:    if (pid == 0) {
        -:   63:        // Execute the command
        5:   64:        execvp(arguments[0], arguments);
        -:   65:        // If execvp fails, print an error message and exit
        5:   66:        perror("Error executing command");
    #####:   67:        exit(1);
        -:   68:    } else { // Parent process
        -:   69:        // Wait for the child process to finish
        2:   70:        wait(NULL);
        -:   71:        // Free memory allocated for the arguments array
        2:   72:        free(arguments);
        -:   73:        // Flush stdout to ensure all output is printed before returning
        2:   74:        fflush(stdout);
        -:   75:    }
        2:   76:}
        -:   77:
        -:   78:/**
        -:   79: * @brief Signal handler for the timeout.
        -:   80: * 
        -:   81: * @param signal The signal number.
        -:   82: */
    #####:   83:void handle_timeout(int signal) {
        -:   84:    // Terminate the process
    #####:   85:    exit(0);
        -:   86:}
        -:   87:
        -:   88:/**
        -:   89: * @brief Closes the descriptors if they are not standard input/output.
        -:   90: * 
        -:   91: * @param descriptors An array containing the descriptors to close.
        -:   92: */
    #####:   93:void close_descriptors(int *descriptors) {
        -:   94:    // Close descriptors if they are not standard input/output
    #####:   95:    if (descriptors[0] != STDIN_FILENO) {
    #####:   96:        close(descriptors[0]);
        -:   97:    }
    #####:   98:    if (descriptors[1] != STDOUT_FILENO) {
    #####:   99:        close(descriptors[1]);
        -:  100:    }
    #####:  101:}
        -:  102:
        -:  103:/**
        -:  104: * @brief Sets up a TCP server.
        -:  105: * 
        -:  106: * @param descriptors An array to store the file descriptors.
        -:  107: * @param port The port number to bind to.
        -:  108: * @param b_flag Optional flag for bidirectional communication.
        -:  109: */
    #####:  110:void setup_TCPServer(int *descriptors, int port, char *b_flag) {
        -:  111:    // Create a TCP socket
    #####:  112:    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    #####:  113:    if (sockfd < 0) {
    #####:  114:        perror("Error creating TCP socket");
    #####:  115:        exit(EXIT_FAILURE);
        -:  116:    }
    #####:  117:    printf("TCP socket has been created!\n");
        -:  118:
        -:  119:    // Allow the socket to be reused
    #####:  120:    int optval = 1;
    #####:  121:    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) == -1) {
    #####:  122:        perror("Error setting socket options");
    #####:  123:        exit(EXIT_FAILURE);
        -:  124:    }
        -:  125:
        -:  126:    // Set up the server address structure
        -:  127:    struct sockaddr_in server_addr;
    #####:  128:    server_addr.sin_family = AF_INET;
    #####:  129:    server_addr.sin_port = htons(port);
    #####:  130:    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        -:  131:
        -:  132:    // Bind the socket
    #####:  133:    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
    #####:  134:        perror("Error binding TCP socket");
    #####:  135:        exit(EXIT_FAILURE);
        -:  136:    }
        -:  137:
        -:  138:    // Listen for connections
    #####:  139:    if (listen(sockfd, 1) < 0) {
    #####:  140:        perror("Error listening for connections");
    #####:  141:        exit(EXIT_FAILURE);
        -:  142:    }
        -:  143:
        -:  144:    // Accept a client connection
        -:  145:    struct sockaddr_in client_addr;
    #####:  146:    socklen_t client_len = sizeof(client_addr);
    #####:  147:    int client_fd = accept(sockfd, (struct sockaddr *)&client_addr, &client_len);
    #####:  148:    if (client_fd < 0) {
    #####:  149:        perror("Error accepting client connection");
    #####:  150:        exit(EXIT_FAILURE);
        -:  151:    }
        -:  152:
        -:  153:    // Set the client file descriptor in the descriptors array
    #####:  154:    descriptors[0] = client_fd;
        -:  155:
        -:  156:    // If bidirectional communication is requested, set the second descriptor to the same client file descriptor
    #####:  157:    if (b_flag != NULL) {
    #####:  158:        descriptors[1] = client_fd;
        -:  159:    }
    #####:  160:}
        -:  161:
        -:  162:/**
        -:  163: * @brief Sets up a TCP client.
        -:  164: * 
        -:  165: * @param descriptors An array to store the file descriptors.
        -:  166: * @param ip The IP address to connect to.
        -:  167: * @param port The port number to connect to.
        -:  168: */
    #####:  169:void setup_TCPClient(int *descriptors, char *ip, int port) {
        -:  170:    // Create a TCP socket
    #####:  171:    int sock = socket(AF_INET, SOCK_STREAM, 0);
    #####:  172:    if (sock == -1) {
    #####:  173:        perror("Error creating socket");
    #####:  174:        exit(1);
        -:  175:    }
        -:  176:
        -:  177:    // Print message indicating TCP client setup
    #####:  178:    printf("Setting up TCP client to connect to %s:%d\n", ip, port);
    #####:  179:    fflush(stdout);
        -:  180:
        -:  181:    // Set up server address structure
        -:  182:    struct sockaddr_in server_addr;
    #####:  183:    memset(&server_addr, 0, sizeof(server_addr));
    #####:  184:    server_addr.sin_family = AF_INET;
    #####:  185:    server_addr.sin_port = htons(port);
        -:  186:
        -:  187:    // Set socket option to allow address reuse
    #####:  188:    if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int)) < 0) {
    #####:  189:        perror("Error setting socket options");
    #####:  190:        close(sock);
    #####:  191:        exit(1);
        -:  192:    }
        -:  193:
        -:  194:    // Convert "localhost" to the loopback address
    #####:  195:    if (strcmp(ip, "localhost") == 0) {
    #####:  196:        ip = "127.0.0.1";
        -:  197:    }
        -:  198:
        -:  199:    // Convert IP address string to binary representation
    #####:  200:    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {
    #####:  201:        perror("Invalid IP address");
    #####:  202:        close(sock);
    #####:  203:        exit(EXIT_FAILURE);
        -:  204:    }
        -:  205:
        -:  206:    // Connect to the server
    #####:  207:    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  208:        perror("Error connecting to server");
    #####:  209:        close(sock);
    #####:  210:        exit(1);
        -:  211:    }
        -:  212:
        -:  213:    // Store the client socket descriptor in the descriptors array
    #####:  214:    descriptors[1] = sock;
        -:  215:
        -:  216:    // Print successful connection message
    #####:  217:    printf("Successfully connected to %s:%d\n", ip, port);
    #####:  218:    fflush(stdout);
    #####:  219:}
        -:  220:
        -:  221:/**
        -:  222: * @brief Sets up a UDP server.
        -:  223: * 
        -:  224: * @param descriptors An array to store the file descriptors.
        -:  225: * @param port The port number to bind to.
        -:  226: * @param timeout The timeout value in seconds.
        -:  227: */
    #####:  228:void setup_UDPServer(int *descriptors, int port, int timeout) {
        -:  229:    // Create a UDP socket
    #####:  230:    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    #####:  231:    if (sockfd == -1) {
    #####:  232:        perror("UDP socket creation error");
    #####:  233:        close_descriptors(descriptors);
    #####:  234:        exit(1);
        -:  235:    }
    #####:  236:    printf("UDP Socket created\n");
        -:  237:
        -:  238:    // Enable address reuse for the socket
    #####:  239:    int enable = 1;
    #####:  240:    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int)) < 0) {
    #####:  241:        perror("UDP setsockopt error");
    #####:  242:        close_descriptors(descriptors);
    #####:  243:        exit(1);
        -:  244:    }
        -:  245:
        -:  246:    // Set up server address
        -:  247:    struct sockaddr_in server_addr;
    #####:  248:    server_addr.sin_family = AF_INET;
    #####:  249:    server_addr.sin_port = htons(port);
    #####:  250:    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        -:  251:
        -:  252:    // Bind socket to server address
    #####:  253:    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  254:        perror("UDP bind error");
    #####:  255:        close_descriptors(descriptors);
    #####:  256:        exit(1);
        -:  257:    }
        -:  258:
        -:  259:    // Receive data from client
        -:  260:    char buffer[1024];
        -:  261:    struct sockaddr_in client_addr;
    #####:  262:    socklen_t client_addr_len = sizeof(client_addr);
    #####:  263:    int numbytes = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&client_addr, &client_addr_len);
    #####:  264:    if (numbytes == -1) {
    #####:  265:        perror("UDP receive data error");
    #####:  266:        close_descriptors(descriptors);
    #####:  267:        exit(1);
        -:  268:    }
        -:  269:
        -:  270:    // Connect to client
    #####:  271:    if (connect(sockfd, (struct sockaddr *)&client_addr, sizeof(client_addr)) == -1) {
    #####:  272:        perror("UDP connect to client error");
    #####:  273:        close_descriptors(descriptors);
    #####:  274:        exit(1);
        -:  275:    }
        -:  276:
        -:  277:    // Send ACK to client
    #####:  278:    if (sendto(sockfd, "ACK", 3, 0, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  279:        perror("UDP send ACK error");
    #####:  280:        exit(1);
        -:  281:    }
        -:  282:
        -:  283:    // Store the server socket descriptor in the descriptors array
    #####:  284:    descriptors[0] = sockfd;
        -:  285:    
        -:  286:    // Set timeout using alarm signal
    #####:  287:    alarm(timeout);
    #####:  288:}
        -:  289:
        -:  290:/**
        -:  291: * @brief Sets up a UDP client.
        -:  292: * 
        -:  293: * @param descriptors An array to store the file descriptors.
        -:  294: * @param ip The IP address to connect to.
        -:  295: * @param port The port number to connect to.
        -:  296: */
    #####:  297:void setup_UDPClient(int *descriptors, char *ip, int port) {
        -:  298:    // Create a UDP socket
    #####:  299:    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    #####:  300:    if (sockfd == -1) {
    #####:  301:        perror("UDP socket creation error");
    #####:  302:        exit(1);
        -:  303:    }
    #####:  304:    printf("UDP client\n");
    #####:  305:    fflush(stdout);
        -:  306:
        -:  307:    // Set up server address
        -:  308:    struct sockaddr_in server_addr;
    #####:  309:    server_addr.sin_family = AF_INET;
    #####:  310:    server_addr.sin_port = htons(port);
        -:  311:
        -:  312:    // Convert IP address from text to binary form
    #####:  313:    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {
    #####:  314:        perror("Invalid server address");
    #####:  315:        exit(1);
        -:  316:    }
        -:  317:
        -:  318:    // Connect to the server
    #####:  319:    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  320:        perror("UDP connect to server error");
    #####:  321:        exit(1);
        -:  322:    }
        -:  323:
        -:  324:    // Store the client socket descriptor in the descriptors array
    #####:  325:    descriptors[1] = sockfd; 
    #####:  326:}
        -:  327:
        -:  328:/**
        -:  329: * @brief Sets up a Unix domain socket datagram server.
        -:  330: * 
        -:  331: * @param descriptors An array to store the file descriptors.
        -:  332: * @param path The path to bind the socket to.
        -:  333: */
        3:  334:void setup_UDSSDServer(int *descriptors, const char *path) {
        -:  335:    // Create a Unix domain datagram socket
        3:  336:    int sockfd = socket(AF_UNIX, SOCK_DGRAM, 0);
        3:  337:    if (sockfd == -1) {
    #####:  338:        perror("Error creating Unix domain socket (datagram)");
    #####:  339:        exit(1);
        -:  340:    }
        -:  341:
        -:  342:    // Set up server address
        -:  343:    struct sockaddr_un server_addr;
        3:  344:    memset(&server_addr, 0, sizeof(server_addr));
        3:  345:    server_addr.sun_family = AF_UNIX;
        3:  346:    strncpy(server_addr.sun_path, path, sizeof(server_addr.sun_path) - 1);
        -:  347:
        -:  348:    // Remove the socket file if it already exists
        3:  349:    unlink(path);
        -:  350:
        -:  351:    // Bind socket to server address
        3:  352:    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  353:        perror("Error binding Unix domain socket (datagram)");
    #####:  354:        close(sockfd);
    #####:  355:        exit(1);
        -:  356:    }
        -:  357:
        3:  358:    printf("Unix domain datagram server started on %s\n", path);
        3:  359:    descriptors[0] = sockfd;
        3:  360:}
        -:  361:
        -:  362:/**
        -:  363: * @brief Sets up a Unix domain socket datagram client.
        -:  364: * 
        -:  365: * @param descriptors An array to store the file descriptors.
        -:  366: * @param path The path to connect the socket to.
        -:  367: */
    #####:  368:void setup_UDSCDClient(int *descriptors, const char *path) {
        -:  369:    // Create a Unix domain datagram socket
    #####:  370:    int sockfd = socket(AF_UNIX, SOCK_DGRAM, 0);
    #####:  371:    if (sockfd == -1) {
    #####:  372:        perror("Error creating Unix domain socket (datagram)");
    #####:  373:        exit(1);
        -:  374:    }
        -:  375:
        -:  376:    // Set up server address
        -:  377:    struct sockaddr_un server_addr;
    #####:  378:    memset(&server_addr, 0, sizeof(server_addr));
    #####:  379:    server_addr.sun_family = AF_UNIX;
    #####:  380:    strncpy(server_addr.sun_path, path, sizeof(server_addr.sun_path) - 1);
        -:  381:
    #####:  382:    printf("Connecting to Unix domain datagram server at %s\n", path);
        -:  383:
        -:  384:    // Connect to the server
    #####:  385:    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  386:        perror("Error connecting to Unix domain socket (datagram)");
    #####:  387:        close(sockfd);
    #####:  388:        exit(1);
        -:  389:    }
        -:  390:
    #####:  391:    printf("Connected to Unix domain datagram server at %s\n", path);
    #####:  392:    descriptors[1] = sockfd;
    #####:  393:}
        -:  394:
        -:  395:/**
        -:  396: * @brief Sets up a Unix domain socket stream server.
        -:  397: * 
        -:  398: * @param descriptors An array to store the file descriptors.
        -:  399: * @param path The path to bind the socket to.
        -:  400: */
        2:  401:void setup_UDSSSServer(int *descriptors, const char *path) {
        -:  402:    // Create a Unix domain stream socket
        2:  403:    int sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
        2:  404:    if (sockfd == -1) {
    #####:  405:        perror("Error creating Unix domain socket (stream)");
    #####:  406:        exit(1);
        -:  407:    }
        -:  408:
        -:  409:    // Set up server address
        -:  410:    struct sockaddr_un server_addr;
        2:  411:    memset(&server_addr, 0, sizeof(server_addr));
        2:  412:    server_addr.sun_family = AF_UNIX;
        2:  413:    strncpy(server_addr.sun_path, path, sizeof(server_addr.sun_path) - 1);
        -:  414:
        -:  415:    // Remove the socket file if it already exists
        2:  416:    unlink(path);
        -:  417:
        -:  418:    // Bind socket to server address
        2:  419:    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  420:        perror("Error binding Unix domain socket (stream)");
    #####:  421:        close(sockfd);
    #####:  422:        exit(1);
        -:  423:    }
        -:  424:
        -:  425:    // Listen for connections
        2:  426:    if (listen(sockfd, 1) == -1) {
    #####:  427:        perror("Error listening on Unix domain socket (stream)");
    #####:  428:        close(sockfd);
    #####:  429:        exit(1);
        -:  430:    }
        -:  431:
        2:  432:    printf("Unix domain stream server started on %s\n", path);
        -:  433:
        -:  434:    // Accept a client connection
        2:  435:    int client_fd = accept(sockfd, NULL, NULL);
        2:  436:    if (client_fd == -1) {
    #####:  437:        perror("Error accepting connection on Unix domain socket (stream)");
    #####:  438:        close(sockfd);
    #####:  439:        exit(1);
        -:  440:    }
        -:  441:
        -:  442:    // Store the client socket descriptor in the descriptors array
        2:  443:    descriptors[0] = client_fd;
        2:  444:}
        -:  445:
        -:  446:/**
        -:  447: * @brief Sets up a Unix domain socket stream client.
        -:  448: * 
        -:  449: * @param descriptors An array to store the file descriptors.
        -:  450: * @param path The path to connect the socket to.
        -:  451: */
    #####:  452:void setup_UDSCSClient(int *descriptors, const char *path) {
        -:  453:    // Create a Unix domain stream socket
    #####:  454:    int sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
    #####:  455:    if (sockfd == -1) {
    #####:  456:        perror("Error creating Unix domain socket (stream)");
    #####:  457:        exit(1);
        -:  458:    }
        -:  459:
        -:  460:    // Set up server address
        -:  461:    struct sockaddr_un server_addr;
    #####:  462:    memset(&server_addr, 0, sizeof(server_addr));
    #####:  463:    server_addr.sun_family = AF_UNIX;
    #####:  464:    strncpy(server_addr.sun_path, path, sizeof(server_addr.sun_path) - 1);
        -:  465:
    #####:  466:    printf("Connecting to Unix domain stream server at %s\n", path);
        -:  467:
        -:  468:    // Connect to the server
    #####:  469:    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
    #####:  470:        perror("Error connecting to Unix domain socket (stream)");
    #####:  471:        close(sockfd);
    #####:  472:        exit(1);
        -:  473:    }
        -:  474:
    #####:  475:    printf("Connected to Unix domain stream server at %s\n", path);
    #####:  476:    descriptors[1] = sockfd;
    #####:  477:}
        -:  478:
        -:  479:/**
        -:  480: * @brief Handles events for polling descriptors.
        -:  481: * 
        -:  482: * @param fds The poll file descriptors.
        -:  483: * @param descriptors The descriptors to read/write.
        -:  484: */
    #####:  485:void handle_poll_event(struct pollfd *fds, int *descriptors) {
    #####:  486:    if (fds[0].revents & POLLIN) {
        -:  487:        char buffer[1024];
    #####:  488:        int bytes_read = read(fds[0].fd, buffer, sizeof(buffer));
    #####:  489:        if (bytes_read == -1) {
    #####:  490:            fprintf(stderr, "Error reading from input descriptor: %s\n", strerror(errno));
    #####:  491:            exit(EXIT_FAILURE);
        -:  492:        }
    #####:  493:        if (bytes_read == 0) {
    #####:  494:            return;
        -:  495:        }
    #####:  496:        if (write(fds[1].fd, buffer, bytes_read) == -1) {
    #####:  497:            fprintf(stderr, "Error writing to output descriptor: %s\n", strerror(errno));
    #####:  498:            exit(EXIT_FAILURE);
        -:  499:        }
        -:  500:    }
        -:  501:
    #####:  502:    if (fds[1].revents & POLLIN) {
        -:  503:        char buffer[1024];
    #####:  504:        int bytes_read = read(fds[1].fd, buffer, sizeof(buffer));
    #####:  505:        if (bytes_read == -1) {
    #####:  506:            fprintf(stderr, "Error reading from output descriptor: %s\n", strerror(errno));
    #####:  507:            exit(EXIT_FAILURE);
        -:  508:        }
    #####:  509:        if (bytes_read == 0) {
    #####:  510:            return;
        -:  511:        }
    #####:  512:        if (write(fds[3].fd, buffer, bytes_read) == -1) {
    #####:  513:            fprintf(stderr, "Error writing to stdout: %s\n", strerror(errno));
    #####:  514:            exit(EXIT_FAILURE);
        -:  515:        }
        -:  516:    }
        -:  517:
    #####:  518:    if (fds[2].revents & POLLIN) {
        -:  519:        char buffer[1024];
    #####:  520:        int bytes_read = read(fds[2].fd, buffer, sizeof(buffer));
    #####:  521:        if (bytes_read == -1) {
    #####:  522:            fprintf(stderr, "Error reading from stdin: %s\n", strerror(errno));
    #####:  523:            exit(EXIT_FAILURE);
        -:  524:        }
    #####:  525:        if (bytes_read == 0) {
    #####:  526:            return;
        -:  527:        }
    #####:  528:        if (write(descriptors[1], buffer, bytes_read) == -1) {
    #####:  529:            fprintf(stderr, "Error writing to output descriptor: %s\n", strerror(errno));
    #####:  530:            exit(EXIT_FAILURE);
        -:  531:        }
        -:  532:    }
        -:  533:}
        -:  534:
        5:  535:int main(int argc, char *argv[]) {
        -:  536:    // Check if the number of arguments is less than 2
        5:  537:    if (argc < 2) {
        -:  538:        // Print the usage message to stderr
    #####:  539:        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        -:  540:        // Exit the program with an error code
    #####:  541:        exit(EXIT_FAILURE);
        -:  542:    }
        -:  543:
        -:  544:    int option;  // Variable to store the current option parsed by getopt
        5:  545:    char *exec_command = NULL;  // Variable to store the command to execute
        5:  546:    char *input_type = NULL;  // Variable to store the input type
        5:  547:    char *output_type = NULL;  // Variable to store the output type
        5:  548:    char *timeout = NULL;  // Variable to store the timeout value
        -:  549:
        -:  550:    // Parse command-line options using getopt
       15:  551:    while ((option = getopt(argc, argv, "e:i:o:t:")) != -1) {
       10:  552:        switch (option) {
        -:  553:            // If the option is 'e', store the argument in exec_command
        5:  554:            case 'e':
        5:  555:                exec_command = optarg;
        5:  556:                break;
        -:  557:            // If the option is 'i', store the argument in input_type
        3:  558:            case 'i':
        3:  559:                input_type = optarg;
        3:  560:                break;
        -:  561:            // If the option is 'o', store the argument in output_type
        2:  562:            case 'o':
        2:  563:                output_type = optarg;
        2:  564:                break;
        -:  565:            // If the option is 't', store the argument in timeout
    #####:  566:            case 't':
    #####:  567:                timeout = optarg;
    #####:  568:                break;
        -:  569:            // If an unknown option is encountered, print the usage message and exit
    #####:  570:            default:
    #####:  571:                fprintf(stderr, "Usage: %s <port>\n", argv[0]);
    #####:  572:                exit(EXIT_FAILURE);
        -:  573:        }
        -:  574:    }
        -:  575:
        -:  576:    // If a timeout is specified, set up a signal handler for the alarm signal
        5:  577:    if (timeout != NULL) {
    #####:  578:        signal(SIGALRM, handle_timeout);
        -:  579:        // Set the alarm to trigger after the specified number of seconds
    #####:  580:        alarm(atoi(timeout));
        -:  581:    }
        -:  582:
        -:  583:    int descriptors[2];  // Array to store file descriptors
        5:  584:    descriptors[0] = STDIN_FILENO;  // Default input is standard input
        5:  585:    descriptors[1] = STDOUT_FILENO; // Default output is standard output
        -:  586:
        -:  587:    // If an input type is specified
        5:  588:    if (input_type != NULL) {
        -:  589:        // Print the input type
        3:  590:        printf(" i = : %s\n", input_type);
        -:  591:        // Check if the input type is TCP server
        3:  592:        if (strncmp(input_type, "TCPS", 4) == 0) {
    #####:  593:            input_type += 4;  // Skip the "TCPS" prefix
    #####:  594:            int port = atoi(input_type);  // Convert the port to an integer
    #####:  595:            setup_TCPServer(descriptors, port, NULL);  // Set up a TCP server
        -:  596:        } 
        -:  597:        // Check if the input type is UDP server
        3:  598:        else if (strncmp(input_type, "UDPS", 4) == 0) {
    #####:  599:            input_type += 4;  // Skip the "UDPS" prefix
    #####:  600:            int port = atoi(input_type);  // Convert the port to an integer
        -:  601:            // Set up a UDP server with the specified timeout
    #####:  602:            if (timeout != NULL) {
    #####:  603:                setup_UDPServer(descriptors, port, atoi(timeout));
        -:  604:            } else {
    #####:  605:                setup_UDPServer(descriptors, port, 0);
        -:  606:            }
        -:  607:        } 
        -:  608:        // Check if the input type is Unix domain socket datagram server
        3:  609:        else if (strncmp(input_type, "UDSSD", 5) == 0) {
        2:  610:            input_type += 5;  // Skip the "UDSSD" prefix
        2:  611:            setup_UDSSDServer(descriptors, input_type);  // Set up a Unix domain socket datagram server
        -:  612:        } 
        -:  613:        // Check if the input type is Unix domain socket stream server
        1:  614:        else if (strncmp(input_type, "UDSSS", 5) == 0) {
        1:  615:            input_type += 5;  // Skip the "UDSSS" prefix
        1:  616:            setup_UDSSSServer(descriptors, input_type);  // Set up a Unix domain socket stream server
        -:  617:        } 
        -:  618:        // If the input type is invalid, print an error message and exit
        -:  619:        else {
    #####:  620:            fprintf(stderr, "Invalid input type: %s\n", input_type);
    #####:  621:            exit(1);
        -:  622:        }
        -:  623:    }
        -:  624:
        -:  625:    // If an output type is specified
        5:  626:    if (output_type != NULL) {
        -:  627:        // Print the output type
        2:  628:        printf(" o = : %s\n", output_type);
        -:  629:        // Check if the output type is TCP client
        2:  630:        if (strncmp(output_type, "TCPC", 4) == 0) {
    #####:  631:            output_type += 4;  // Skip the "TCPC" prefix
    #####:  632:            char *ip_server = strtok(output_type, ",");  // Extract the IP address
    #####:  633:            if (ip_server == NULL) {
    #####:  634:                fprintf(stderr, "Invalid server IP\n");
    #####:  635:                close_descriptors(descriptors);
    #####:  636:                exit(1);
        -:  637:            }
    #####:  638:            char *port_number = strtok(NULL, ",");  // Extract the port number
    #####:  639:            if (port_number == NULL) {
    #####:  640:                fprintf(stderr, "Invalid port\n");
    #####:  641:                close_descriptors(descriptors);
    #####:  642:                exit(1);
        -:  643:            }
    #####:  644:            int port = atoi(port_number);  // Convert the port to an integer
    #####:  645:            setup_TCPClient(descriptors, ip_server, port);  // Set up a TCP client
        -:  646:        } 
        -:  647:        // Check if the output type is UDP client
        2:  648:        else if (strncmp(output_type, "UDPC", 4) == 0) {
    #####:  649:            output_type += 4;  // Skip the "UDPC" prefix
    #####:  650:            char *ip_server = strtok(output_type, ",");  // Extract the IP address
    #####:  651:            if (ip_server == NULL) {
    #####:  652:                fprintf(stderr, "Invalid server IP\n");
    #####:  653:                close_descriptors(descriptors);
    #####:  654:                exit(1);
        -:  655:            }
    #####:  656:            char *port_number = strtok(NULL, ",");  // Extract the port number
    #####:  657:            if (port_number == NULL) {
    #####:  658:                fprintf(stderr, "Invalid port\n");
    #####:  659:                close_descriptors(descriptors);
    #####:  660:                exit(1);
        -:  661:            }
    #####:  662:            int port = atoi(port_number);  // Convert the port to an integer
    #####:  663:            setup_UDPClient(descriptors, ip_server, port);  // Set up a UDP client
        -:  664:        } 
        -:  665:        // Check if the output type is Unix domain socket datagram client
        2:  666:        else if (strncmp(output_type, "UDSCD", 5) == 0) {
    #####:  667:            output_type += 5;  // Skip the "UDSCD" prefix
    #####:  668:            setup_UDSCDClient(descriptors, output_type);  // Set up a Unix domain socket datagram client
        -:  669:        } 
        -:  670:        // Check if the output type is Unix domain socket stream client
        2:  671:        else if (strncmp(output_type, "UDSCS", 5) == 0) {
    #####:  672:            output_type += 5;  // Skip the "UDSCS" prefix
    #####:  673:            setup_UDSCSClient(descriptors, output_type);  // Set up a Unix domain socket stream client
        -:  674:        } 
        -:  675:        // Check if the output type is TCP server
        2:  676:        else if (strncmp(output_type, "TCPS", 4) == 0) {
    #####:  677:            output_type += 4;  // Skip the "TCPS" prefix
    #####:  678:            int port = atoi(output_type);  // Convert the port to an integer
    #####:  679:            setup_TCPServer(descriptors, port, NULL);  // Set up a TCP server
        -:  680:        } 
        -:  681:        // Check if the output type is UDP server
        2:  682:        else if (strncmp(output_type, "UDPS", 4) == 0) {
    #####:  683:            output_type += 4;  // Skip the "UDPS" prefix
    #####:  684:            int port = atoi(output_type);  // Convert the port to an integer
        -:  685:            // Set up a UDP server with the specified timeout
    #####:  686:            if (timeout != NULL) {
    #####:  687:                setup_UDPServer(descriptors, port, atoi(timeout));
        -:  688:            } else {
    #####:  689:                setup_UDPServer(descriptors, port, 0);
        -:  690:            }
        -:  691:        } 
        -:  692:        // Check if the output type is Unix domain socket stream server
        2:  693:        else if (strncmp(output_type, "UDSSS", 5) == 0) {
        1:  694:            output_type += 5;  // Skip the "UDSSS" prefix
        1:  695:            setup_UDSSSServer(descriptors, output_type);  // Set up a Unix domain socket stream server
        1:  696:            descriptors[1] = descriptors[0];  // Set descriptors[1] to the socket
        1:  697:            descriptors[0] = STDIN_FILENO;  // Set descriptors[0] to standard input
        -:  698:        } 
        -:  699:        // Check if the output type is Unix domain socket datagram server
        1:  700:        else if (strncmp(output_type, "UDSSD", 5) == 0) {
        1:  701:            output_type += 5;  // Skip the "UDSSD" prefix
        1:  702:            setup_UDSSDServer(descriptors, output_type);  // Set up a Unix domain socket datagram server
        1:  703:            descriptors[1] = descriptors[0];  // Set descriptors[1] to the socket
        1:  704:            descriptors[0] = STDIN_FILENO;  // Set descriptors[0] to standard input
        -:  705:        } 
        -:  706:        // If the output type is invalid, print an error message and exit
        -:  707:        else {
    #####:  708:            fprintf(stderr, "Invalid output type: %s\n", output_type);
    #####:  709:            close_descriptors(descriptors);
    #####:  710:            exit(1);
        -:  711:        }
        -:  712:    }
        -:  713:
        -:  714:    // If an execution command is specified
        5:  715:    if (exec_command != NULL) {
        -:  716:        // Redirect input descriptor to standard input if necessary
        5:  717:        if (descriptors[0] != STDIN_FILENO) {
        3:  718:            if (dup2(descriptors[0], STDIN_FILENO) == -1) {
    #####:  719:                close(descriptors[0]);
    #####:  720:                if (descriptors[1] != STDOUT_FILENO) {
    #####:  721:                    close(descriptors[1]);
        -:  722:                }
    #####:  723:                fprintf(stderr, "failed to duplicating input descriptor: %s\n", strerror(errno));
    #####:  724:                exit(EXIT_FAILURE);
        -:  725:            }
        -:  726:        }
        -:  727:        // Redirect output descriptor to standard output if necessary
        5:  728:        if (descriptors[1] != STDOUT_FILENO) {
        2:  729:            if (dup2(descriptors[1], STDOUT_FILENO) == -1) {
    #####:  730:                close(descriptors[1]);
    #####:  731:                if (descriptors[0] != STDIN_FILENO) {
    #####:  732:                    close(descriptors[0]);
        -:  733:                }
    #####:  734:                fprintf(stderr, "failed to duplicating output descriptor: %s\n", strerror(errno));
    #####:  735:                exit(EXIT_FAILURE);
        -:  736:            }
        -:  737:        }
        -:  738:        // Execute the command
        5:  739:        executeCommand(exec_command);
        -:  740:    } else {  // If no execution command is specified, handle polling events
        -:  741:        struct pollfd poll_file_descriptors[4];  // Array to store poll file descriptors
    #####:  742:        int num_file_descriptors = 4;  // Number of file descriptors to poll
        -:  743:
        -:  744:        // Set up poll descriptors
    #####:  745:        poll_file_descriptors[0].fd = descriptors[0];
    #####:  746:        poll_file_descriptors[0].events = POLLIN;
        -:  747:
    #####:  748:        poll_file_descriptors[1].fd = descriptors[1];
    #####:  749:        poll_file_descriptors[1].events = POLLIN;
        -:  750:
    #####:  751:        poll_file_descriptors[2].fd = STDIN_FILENO;
    #####:  752:        poll_file_descriptors[2].events = POLLIN;
        -:  753:
    #####:  754:        poll_file_descriptors[3].fd = STDOUT_FILENO;
    #####:  755:        poll_file_descriptors[3].events = POLLIN;
        -:  756:
        -:  757:        // Polling loop
    #####:  758:        while (1) {
    #####:  759:            int poll_result = poll(poll_file_descriptors, num_file_descriptors, -1);
    #####:  760:            if (poll_result == -1) {
    #####:  761:                fprintf(stderr, "Error polling: %s\n", strerror(errno));
    #####:  762:                exit(EXIT_FAILURE);
        -:  763:            }
        -:  764:
        -:  765:            // Handle poll events
    #####:  766:            handle_poll_event(poll_file_descriptors, descriptors);
        -:  767:        }
        -:  768:    }
        -:  769:
        -:  770:    // Close descriptors before exiting
        2:  771:    close(descriptors[0]);
        2:  772:    close(descriptors[1]);
        -:  773:
        2:  774:    return 0;  // Return success
        -:  775:}
